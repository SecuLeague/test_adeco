---
- name: Test Jenkins Pipeline for Codel Project Deployment
  hosts: localhost
  connection: local
  gather_facts: no

  pre_tasks:
    - name: Install required packages
      pip:
        name: 
          - python-jenkins
          - requests
        state: present
      become: yes

  vars:
    jenkins_url: "http://192.168.150.10:8080"
    jenkins_user: "amal"
    jenkins_password: "Seculeague@2024"
    project_name: "Codel-Deployment"
    git_repo: "https://github.com/SecuLeague/CODEL1.0.git"
    ssh_key_path: "~/.ssh/id_rsa"
    ansible_python_interpreter: /usr/bin/python3
    target_server: "172.16.0.110"

  tasks:
    - name: Create Jenkins job template
      copy:
        content: |
          <?xml version='1.0' encoding='UTF-8'?>
          <project>
            <description>{{ project_name }}</description>
            <scm class="hudson.plugins.git.GitSCM">
              <userRemoteConfigs>
                <hudson.plugins.git.UserRemoteConfig>
                  <url>{{ git_repo }}</url>
                </hudson.plugins.git.UserRemoteConfig>
              </userRemoteConfigs>
              <branches>
                <hudson.plugins.git.BranchSpec>
                  <name>*/main</name>
                </hudson.plugins.git.BranchSpec>
              </branches>
            </scm>
          </project>
        dest: "jenkins_job_template.xml.j2"

    - name: Ensure Jenkins is running
      uri:
        url: "{{ jenkins_url }}/api/json"
        method: GET
        status_code: [200, 403]
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        validate_certs: no
      register: jenkins_status
      ignore_errors: yes

    - name: Get Jenkins crumb
      uri:
        url: "{{ jenkins_url }}/crumbIssuer/api/json"
        method: GET
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        validate_certs: no
      register: crumb
      when: jenkins_status is success

    - name: Create Jenkins job
      jenkins_job:
        config: "{{ lookup('template', 'jenkins_job_template.xml.j2') }}"
        name: "{{ project_name }}"
        password: "{{ jenkins_password }}"
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_user }}"
      register: jenkins_job
      when: jenkins_status is success

    - name: Setup SSH connection
      block:
        - name: Generate SSH key if not exists
          openssh_keypair:
            path: "{{ ssh_key_path }}"
            type: rsa
            size: 2048
            state: present
          
        - name: Add SSH public key to authorized_keys
          authorized_key:
            user: root
            state: present
            key: "{{ lookup('file', ssh_key_path + '.pub') }}"
          delegate_to: "{{ target_server }}"
          become: yes

    - name: Test SSH connectivity
      wait_for:
        host: "{{ target_server }}"
        port: 22
        timeout: 10
      register: ssh_check
      ignore_errors: yes

    - name: Trigger Jenkins job
      jenkins_job:
        name: "{{ project_name }}"
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        state: build
      when: jenkins_job is success
      register: triggered_job

    - name: Wait for job to complete
      jenkins_job_info:
        name: "{{ project_name }}"
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        url: "{{ jenkins_url }}"
      register: job_info
      until: job_info.jobs[0].color != 'blue_anime'
      retries: 10
      delay: 30
      when: triggered_job is success

## 2. Vault Playbook
```yaml
---
- name: Test Vault integration with Ansible
  hosts: localhost
  connection: local
  gather_facts: no

  pre_tasks:
    - name: Install required packages
      pip:
        name: 
          - hvac
          - requests
        state: present
      become: yes

  vars:
    vault_addr: "http://127.0.0.1:8200"
    vault_token: "hvs.DEHrf26A2FphnKgKm376o0kZ"
    proxmox_source_environment: "dev"
    proxmox_destination_environment: "qua"

  tasks:
    - name: Verify Vault health
      uri:
        url: "{{ vault_addr }}/v1/sys/health"
        method: GET
        status_code: [200, 429, 472, 473, 501, 503]
        validate_certs: no
      register: vault_health
      ignore_errors: yes

    - name: Display Vault health status
      debug:
        var: vault_health

    - name: Retrieve Proxmox source secrets
      uri:
        url: "{{ vault_addr }}/v1/secret/data/proxmox/{{ proxmox_source_environment }}"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
        status_code: [200, 404]
        validate_certs: no
      register: source_vault_secrets
      ignore_errors: yes
      when: vault_health is success

    - name: Display results
      debug:
        msg:
          - "Vault accessible: {{ vault_health.status == 200 }}"
          - "Source secrets retrieved: {{ source_vault_secrets.status == 200 if source_vault_secrets is defined else 'No' }}"

## 3. Git Playbook
```yaml
---
- name: Test CODEL 1.0.0 Git Repository and Jenkins Integration
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    ansible_ssh_pass: ro0t@sys
    ansible_ssh_timeout: 60
    git_repo: "/root/CODEL1.0"
    jenkins_url: "http://192.168.150.10:8080"
    jenkins_user: "amal"
    jenkins_api_token: "11e6cdba6083554658c8463aaecbe80e10"
    job_name: "CODEL1.0-CI"

  tasks:
    - name: Vérifier l'état du dépôt Git manuellement
      command: ssh root@192.168.150.10 "cd {{ git_repo }} && /usr/bin/git status"
      register: git_status
      changed_when: false

    - name: Afficher l'état Git
      debug:
        var: git_status.stdout_lines

    - name: Obtenir le crumb CSRF
      uri:
        url: "{{ jenkins_url }}/crumbIssuer/api/json"
        method: GET
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_api_token }}"
        force_basic_auth: yes
        validate_certs: no
      register: crumb_response

    - name: Vérifier que Jenkins est en cours d'exécution
      uri:
        url: "{{ jenkins_url }}"
        method: GET
        status_code: 200
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_api_token }}"
        force_basic_auth: yes
        validate_certs: no
      register: jenkins_status
