---
- name: Test Jenkins Pipeline for Codel Project Deployment
  hosts: localhost
  connection: local
  gather_facts: no

  pre_tasks:
    - name: Install required collections and packages
      pip:
        name: 
          - python-jenkins
          - requests
        state: present
      become: yes

  vars:
    jenkins_url: "http://192.168.150.10:8080"
    jenkins_user: "amal"
    jenkins_password: "Seculeague@2024"
    project_name: "Codel-Deployment"
    git_repo: "https://github.com/SecuLeague/CODEL1.0.git"
    ssh_key_path: "~/.ssh/id_rsa"
    ansible_python_interpreter: /usr/bin/python3
    target_server: "172.16.0.110"

  tasks:
    - name: Create Jenkins job template
      copy:
        content: |
          <?xml version='1.0' encoding='UTF-8'?>
          <project>
            <description>{{ project_name }}</description>
            <scm class="hudson.plugins.git.GitSCM">
              <userRemoteConfigs>
                <hudson.plugins.git.UserRemoteConfig>
                  <url>{{ git_repo }}</url>
                </hudson.plugins.git.UserRemoteConfig>
              </userRemoteConfigs>
              <branches>
                <hudson.plugins.git.BranchSpec>
                  <name>*/main</name>
                </hudson.plugins.git.BranchSpec>
              </branches>
            </scm>
          </project>
        dest: "jenkins_job_template.xml.j2"

    - name: Ensure Jenkins is running
      uri:
        url: "{{ jenkins_url }}/api/json"
        method: GET
        status_code: [200, 403]
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        validate_certs: no
      register: jenkins_status
      ignore_errors: yes

    - name: Get Jenkins crumb
      uri:
        url: "{{ jenkins_url }}/crumbIssuer/api/json"
        method: GET
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_password }}"
        force_basic_auth: yes
        validate_certs: no
      register: crumb
      when: jenkins_status is success

    - name: Create Jenkins job
      jenkins_job:
        config: "{{ lookup('template', 'jenkins_job_template.xml.j2') }}"
        name: "{{ project_name }}"
        password: "{{ jenkins_password }}"
        url: "{{ jenkins_url }}"
        user: "{{ jenkins_user }}"
      register: jenkins_job
      when: jenkins_status is success

    - name: Setup SSH connection
      block:
        - name: Generate SSH key if not exists
          openssh_keypair:
            path: "{{ ssh_key_path }}"
            type: rsa
            size: 2048
            state: present
          
        - name: Add SSH public key to authorized_keys
          authorized_key:
            user: root
            state: present
            key: "{{ lookup('file', ssh_key_path + '.pub') }}"
          delegate_to: "{{ target_server }}"
          become: yes

        - name: Test SSH connectivity
          wait_for:
            host: "{{ target_server }}"
            port: 22
            timeout: 10
          register: ssh_check
          ignore_errors: yes

    - name: Verify target server connectivity
      block:
        - name: Check SSH service status
          command: systemctl status sshd
          register: ssh_service_status
          delegate_to: "{{ target_server }}"
          ignore_errors: yes

        - name: Display SSH service status
          debug:
            var: ssh_service_status

    - name: Trigger and monitor Jenkins job
      block:
        - name: Trigger Jenkins job
          jenkins_job:
            name: "{{ project_name }}"
            url: "{{ jenkins_url }}"
            user: "{{ jenkins_user }}"
            password: "{{ jenkins_password }}"
            state: build
          when: jenkins_job is success
          register: triggered_job

        - name: Wait for job to complete
          jenkins_job_info:
            name: "{{ project_name }}"
            user: "{{ jenkins_user }}"
            password: "{{ jenkins_password }}"
            url: "{{ jenkins_url }}"
          register: job_info
          until: job_info.jobs[0].color != 'blue_anime'
          retries: 10
          delay: 30
          when: triggered_job is success

        - name: Display job result
          debug:
            var: job_info.jobs[0].color
          when: job_info is success
